Inheritence-(RE-usability of code)
4 main types-
1)Single Level
2)Mutlit-level
3)Hirerachical
4)Multiple(not supported with classes, can be achieved with the help of interfaces).
-----
5)Hybrid(combination of above types).
------------------------------------------------------------------------
1)[Single Level]
class A{ //super or base or parent class
	int x=10;
	void abc(){
		System.out.println("Hi  from A");
	}
}
class B extends A{ // sub or derived or child class.
}
public class Inheritence{
	public static void main(String[] args) {
		A a1=new A();
		System.out.println(a1.x);
		a1.abc();
		B b1=new B();
		System.out.println(b1.x);
		b1.abc();
	}
}
---------------------------------------------------------
2) [Multi-level]
class A{ 
	int x=10;
	int z=20;
	void abc(){
		System.out.println("Hi  from A");
	}
}
class B extends A{ 
	int z=70;
	void xyz(){
		//System.out.println(super.z+" "+ z);
		System.out.println("Hi  from B");
    }
}
class C extends B{
   int y=30;
   void xyz(){
   	System.out.println("Hi from C");
   }
}
public class Inheritence{
	public static void main(String[] args) {
		A a1=new A();
		System.out.println(a1.x);
		a1.abc();
		System.out.println("-------------");
		B b1=new B();
		System.out.println(b1.x);
		b1.abc();b1.xyz();
		System.out.println("-------------");
		C c1=new C();
		System.out.println(c1.x+" "+c1.z);//10 70[same as below written]
		c1.abc();
		c1.xyz();//[while inheriting first classs checks inseide itself ,if not present it checks in it parent class,if not present it checks in its grand-Parent classs and goes on..]	
		System.out.println("-------------");
	}
}-----------------------------------------
3)[Hierarchical]
class A{}
class B extends A{}
class C extends A{}
------------------------------------
Method Overriding is having more than one method with same method Signature(i.e with same method name , same parameters and same return type) in its derived class
whereas, method overloading is having more than one method with same name and diff parameters within the same class.
-----------------------------------------------------------------------------------
if we have same property in both child and parent class and we want to access both of them then ,
we can access parent class property with the help of SUPER keyword 
and its class property with THIS keyword.

--<Super keyword is used to inherit the property of the immediate next class(i.e. of its parent class only not of its grand parent class)>--
eg.
class A				
{
	int x = 10;
	void abc()
	{
		System.out.println("HI");
	}
}
class B extends A		
{
	int x = 50;
	void abc()
	{
		System.out.println("HELLO");
	}
	public void xyz()
	{
		System.out.println(super.x);
		System.out.println(this.x);
		this.abc();
		super.abc();
	}
}
class C extends B
{
	
}
public class InheritanceDemo3
{
	public static void main(String args[])
	{
		B b1 = new B();
		b1.xyz();
	}
}------------------------------------------------------------ 

[While inheriting, every sub-class constructor by default calls the non-parameterised cosmtructor of its Parent class.]
class A				
{   A(){ System.out.println("A()");}
	A(int x){
		System.out.println("A(int)");
	}
	A(String str)
	{
		System.out.println("A(String)");
	}
}
class B extends A		
{	B()
	{
		System.out.println("B()");
	}
	B(int x){
		System.out.println("B(int)");
	}
	B(String str)
	{
		this();
		System.out.println("B(String)");
	}
}
public class InheritanceDemo4
{	public static void main(String args[])
	{
		  B b1 = new B();
System.out.println("--------------");
	          B b2=new B(45);

	}
}Output:-
// F:\JavaTraining\java\OOPS>java InheritanceDemo4
// A()
// B()
--------------------
// A()
// B(int)
-----------------------------------------------------------------------------------------------
RUNTIME POLYMORPHISM:-
class A{
 	void abc(){
 		System.out.println("Hi from A");
 	}
}
class B extends A{
	void abc(){
		System.out.println("Hi from B");
	}
}

public class InheritanceDemo5{
	public static void main(String[] args) {
	    A a1=new B();//this onw works as B() will by default call the non-parameterized constructor of class A and hence all the properties of class will
	                 // be achieved.Then B() constructor is caleed then all the properties of the claass B will be acheieved.

	   // B b1=new A();//does not works as b1 is the reference variable pointing to the object of class A.
	                 // So only A() is called. B() is never called .Hence  properties of class B will never be initialized.		
              [InheritanceDemo5.java:17: error: incompatible types: A cannot be converted to B
            B b1=new A();
                 ^	 1 error]
   
                a1.abc();//works
	        b1.abc();//error
	}
}
------------------------------------------------------------------------------------------------------------
INTERFACE:/*
eg,(javap I)
interface I {
  public static final int x;
  public abstract void add();
  public abstract void sub();
}
/*
Interface is used to achieve pure abstraction. all the variables in it are by default public static final. ALl the methods in it are by default public.
Client if only gviven the interface ,which only contains abstract Methods(empty body without any logic) with them and you will be having the class with all the logic part.Hence, Security issue is solved.
Client is unaware of the implementation part ,you only give the interface to the client (limited access clients can work on ).
*/
interface I{
	int x=50;
	void add();
	void sub();
}
interface J{
	int y=5;
	void mul();
	void div();
}
interface K extends I,J{

}
class Calculator implements K // or implements I,j same thing.
{
	
	public void add()
	{
		System.out.println(K.x + K.y);
	}
	public void sub()
	{
		System.out.println(I.x - J.y);
	}
	public void mul()
	{
		System.out.println(K.x * K.y);
	}
	public void div()
	{
		System.out.println(I.x / J.y);
	}
 
}
public class InterfaceMy{
	public static void main(String[] args) {
		//System.out.println(I.x+""+K.x+""+J.y+""+K.y); Interface variables are class variables(static variables)So they can be directly accessed without creating any object.
		Calculator c1=new Calculator();
        //c1.add();c1.sub();c1.mul();c1.div();//it will work but now your are letting client access all the mehtods of the class. Hence , not secure .
		
	    //secure thing is to give only inerface to client . For clients who only want to add and sub ,give them Interface I. For the CLients who wants to mul and div ,give them Interface J.
	    I i1=c1;//i1 is the interface variable pointing to the refence variable(which is pointing to the calculator class object).
	    J j1=c1;
	    i1.add();i1.sub();
	    j1.mul();j1.div();

	    System.out.println("======================== eg. of multiple inheritance by K interface");
	    K k1=c1;
	    k1.add();k1.sub();
	    k1.mul();k1.div();

	}
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

